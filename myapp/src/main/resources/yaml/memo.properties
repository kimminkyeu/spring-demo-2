
# application.properties ? ?? ??? ?? ????.

spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.hibernate.ddl-auto=none
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true



# ***************************************************************************
# NOTE: DDL Command ?? ???? ??... --> database ??? ? ????...?
# ***************************************************************************
# When creating a persistence layer, we need to match our SQL database schema
# with the object model that we created in our code.
# Reference : https://www.baeldung.com/spring-data-jpa-generate-db-schema
# ---------------------------------------------------------------------------
# create: generates only database create commands
spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=drop-and-create
# The script target defines the location of the file that contains the schema create or drop commands.

spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=./ddl/create.sql
spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=./ddl/drop.sql

# To generate the schema DDL commands from our entity models, we should include
# the schema source configurations with the metadata option selected.
spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
spring.jpa.properties.javax.persistence.schema-generation.drop-source=metadata
